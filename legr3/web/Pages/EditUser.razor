@page "/edit-user"
@page "/edit-user/{id:long}"
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@if(id == null)
{
	<h3>Create User</h3>
}
else
{
	<h3>Edit User @user.getRwkString() </h3>
}

<EditForm Model="user" onsubmit="HandleSubmit">
	@{
		Console.WriteLine("rendering");
	}
	<div>
        <table>

                <tr>
                <td><label for="id">User ID</label></td>
		        <td><InputNumber id="id" @bind-Value="user.id" class="form-control" /></td>
                </tr>
                
                <tr>
                <td><label for="first_name">First</label></td>
		        <td><InputText id="first_name" @bind-Value="user.first_name" class="form-control" /></td>
                </tr>
                
                <tr>
                <td><label for="last_name">Last</label></td>
		        <td><InputText id="last_name" @bind-Value="user.last_name" class="form-control" /></td>
                </tr>
                
                <tr>
                <td><label for="username">Username</label></td>
		        <td><InputText id="username" @bind-Value="user.username" class="form-control" /></td>
                </tr>
                
                <tr>
                <td><label for="email">Email</label></td>
		        <td><InputText id="email" @bind-Value="user.email" class="form-control" /></td>
                </tr>
                
                <tr>
                <td><label for="created_date">Created</label></td>
		        <td><InputDate id="created_date" @bind-Value="user.created_date" class="form-control" /></td>
                </tr>
                
                <tr>
                <td><label for="last_login_date">Last Login</label></td>
		        <td><InputDate id="last_login_date" @bind-Value="user.last_login_date" class="form-control" /></td>
                </tr>
                		

				<tr>
					<td>Active</td><td>@(user.is_active.ToString())</td>
				</tr>
				
				<tr>
					<td>Created By</td><td>@(user.created_by.ToString())</td>
				</tr>
				
				<tr>
					<td>Last Updated</td><td>@(user.last_updated.ToString())</td>
				</tr>
				
				<tr>
					<td>Last Updated By</td><td>@(user.last_updated_by.ToString())</td>
				</tr>
				
				<tr>
					<td>Version</td><td>@(user.version.ToString())</td>
				</tr>
							
		</table>
	</div>
	<button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
	[Parameter]
	public long? id {get;set;}

	public User user {get;set;} = new User();

	protected override async Task OnParametersSetAsync()
	{
		Console.WriteLine("getting data");
		if (id is not null) {
			var remoteClient = ClientFactory.CreateClient("RemoteAPI");
		var result = await remoteClient.GetFromJsonAsync<User>($"api/user/{id}");
		if (result is not null)
			user = result;
		}
	
	}

	async Task  HandleSubmit()
	{
		var remoteClient = ClientFactory.CreateClient("RemoteAPI");

		if (id is not null) {
			
			var result = await remoteClient.PutAsJsonAsync<User>($"api/user/{id}", user);
				if (result is not null)
				{
					var readResult = await result.Content.ReadFromJsonAsync<User>();
					if (readResult is not null) 
					{
						user = readResult;
					}
				}
		}
		else
		{
			var result = await remoteClient.PostAsJsonAsync<User>($"api/user", user);	
			if (result is not null)
				{
					var readResult = await result.Content.ReadFromJsonAsync<User>();
					if (readResult is not null)
					{
						user = readResult;
					}
				}
		}

	}
}   
