@page "/edit-metricresourcemap"
@page "/edit-metricresourcemap/{id:long}"
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@if(id == null)
{
	<h3>Create Metric Resource Map</h3>
}
else
{
	<h3>Edit Metric Resource Map @metricresourcemap.getRwkString() </h3>
}

<EditForm Model="metricresourcemap" onsubmit="HandleSubmit">
	@{
		Console.WriteLine("rendering");
	}
	<div>
        <table>

                <tr>
                <td><label for="id">ID</label></td>
		        <td><InputNumber id="id" @bind-Value="metricresourcemap.id" class="form-control" /></td>
                </tr>
                
                <tr>
                <td><label for="resource_id">Resource</label></td>
		        <td><InputNumber id="resource_id" @bind-Value="metricresourcemap.resource_id" class="form-control" /></td>
                </tr>
                
                <tr>
                <td><label for="metric_id">Metric</label></td>
		        <td><InputNumber id="metric_id" @bind-Value="metricresourcemap.metric_id" class="form-control" /></td>
                </tr>
                		

				<tr>
					<td>Active</td><td>@(metricresourcemap.is_active.ToString())</td>
				</tr>
				
				<tr>
					<td>Created By</td><td>@(metricresourcemap.created_by.ToString())</td>
				</tr>
				
				<tr>
					<td>Last Updated</td><td>@(metricresourcemap.last_updated.ToString())</td>
				</tr>
				
				<tr>
					<td>Last Updated By</td><td>@(metricresourcemap.last_updated_by.ToString())</td>
				</tr>
				
				<tr>
					<td>Version</td><td>@(metricresourcemap.version.ToString())</td>
				</tr>
							
		</table>
	</div>
	<button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
	[Parameter]
	public long? id {get;set;}

	public MetricResourceMap metricresourcemap {get;set;} = new MetricResourceMap();

	protected override async Task OnParametersSetAsync()
	{
		Console.WriteLine("getting data");
		if (id is not null) {
			var remoteClient = ClientFactory.CreateClient("RemoteAPI");
		var result = await remoteClient.GetFromJsonAsync<MetricResourceMap>($"api/metricresourcemap/{id}");
		if (result is not null)
			metricresourcemap = result;
		}
	
	}

	async Task  HandleSubmit()
	{
		var remoteClient = ClientFactory.CreateClient("RemoteAPI");

		if (id is not null) {
			
			var result = await remoteClient.PutAsJsonAsync<MetricResourceMap>($"api/metricresourcemap/{id}", metricresourcemap);
				if (result is not null)
				{
					var readResult = await result.Content.ReadFromJsonAsync<MetricResourceMap>();
					if (readResult is not null) 
					{
						metricresourcemap = readResult;
					}
				}
		}
		else
		{
			var result = await remoteClient.PostAsJsonAsync<MetricResourceMap>($"api/metricresourcemap", metricresourcemap);	
			if (result is not null)
				{
					var readResult = await result.Content.ReadFromJsonAsync<MetricResourceMap>();
					if (readResult is not null)
					{
						metricresourcemap = readResult;
					}
				}
		}

	}
}   
